import{O as c,bv as f,ah as m}from"./ddd@DwDq534T.js";import{GLTFLoader as u}from"./GLTFLoader@CYrxnVa8.js";const x="https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/";class g{constructor(e,n,i,t,s=null,h=null){this.controller=n,this.handModel=e,this.bones=[],s===null&&(s=new u,s.setPath(i||x)),s.load(`${t}.glb`,p=>{const o=p.scene.children[0];this.handModel.add(o);const r=o.getObjectByProperty("type","SkinnedMesh");r.frustumCulled=!1,r.castShadow=!0,r.receiveShadow=!0,["wrist","thumb-metacarpal","thumb-phalanx-proximal","thumb-phalanx-distal","thumb-tip","index-finger-metacarpal","index-finger-phalanx-proximal","index-finger-phalanx-intermediate","index-finger-phalanx-distal","index-finger-tip","middle-finger-metacarpal","middle-finger-phalanx-proximal","middle-finger-phalanx-intermediate","middle-finger-phalanx-distal","middle-finger-tip","ring-finger-metacarpal","ring-finger-phalanx-proximal","ring-finger-phalanx-intermediate","ring-finger-phalanx-distal","ring-finger-tip","pinky-finger-metacarpal","pinky-finger-phalanx-proximal","pinky-finger-phalanx-intermediate","pinky-finger-phalanx-distal","pinky-finger-tip"].forEach(a=>{const l=o.getObjectByName(a);l!==void 0?l.jointName=a:console.warn(`Couldn't find ${a} in ${t} hand mesh`),this.bones.push(l)}),h&&h(o)})}updateMesh(){const e=this.controller.joints;for(let n=0;n<this.bones.length;n++){const i=this.bones[n];if(i){const t=e[i.jointName];if(t.visible){const s=t.position;i.position.copy(s),i.quaternion.copy(t.quaternion)}}}}}const b=.01,P="index-finger-tip";class M extends c{constructor(e,n=null,i=null){super(),this.controller=e,this.motionController=null,this.envMap=null,this.loader=n,this.onLoad=i,this.mesh=null,e.addEventListener("connected",t=>{const s=t.data;s.hand&&!this.motionController&&(this.xrInputSource=s,this.motionController=new g(this,e,this.path,s.handedness,this.loader,this.onLoad))}),e.addEventListener("disconnected",()=>{this.clear(),this.motionController=null})}updateMatrixWorld(e){super.updateMatrixWorld(e),this.motionController&&this.motionController.updateMesh()}getPointerPosition(){const e=this.controller.joints[P];return e?e.position:null}intersectBoxObject(e){const n=this.getPointerPosition();if(n){const i=new f(n,b),t=new m().setFromObject(e);return i.intersectsBox(t)}else return!1}checkButton(e){this.intersectBoxObject(e)?e.onPress():e.onClear(),e.isPressed()&&e.whilePressed()}}export{M as OculusHandModel};
